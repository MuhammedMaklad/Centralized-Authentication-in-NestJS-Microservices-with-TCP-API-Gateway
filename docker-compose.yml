services:
  api-gateway:
    container_name: api-gateway-container
    build:
      context: .
      dockerfile: ./apps/api-gateway/Dockerfile
      target: development
    env_file:
      - apps/api-gateway/.env
    ports:
      - '3000:3000'
    command: npm run start:dev api-gateway
    networks:
      - app-network
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules # ensure that node-modules aren't overwritten by bind / using during builder stage
      - /usr/src/app/dist
  auth-service:
    container_name: auth-service-container
    build:
      context: .
      dockerfile: ./apps/auth-service/Dockerfile
      target: development
    env_file:
      - apps/auth-service/.env
    ports:
      - '3001:3000'
    networks:
      - app-network
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
      - /usr/src/app/dist
    command: npm run start:dev auth-service

  user-service:
    container_name: user-service-container
    build:
      context: .
      dockerfile: ./apps/user-service/Dockerfile
      target: development
    env_file:
      - apps/user-service/.env
    ports:
      - '3002:3000'
    networks:
      - app-network
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
      - /usr/src/app/dist
    command: npm run start:dev user-service

  database-service:
    container_name: postgresql-database
    image: postgres:latest
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
      POSTGRES_DB: app_database_v1
    ports:
      - '5432:5432'
    volumes:
      - postgresql-database-volume:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U admin']
      interval: 1m
      timeout: 30s
      retries: 5
      start_period: 30s
networks:
  app-network:
    driver: bridge

volumes:
  postgresql-database-volume:
